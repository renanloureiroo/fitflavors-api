# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: fitflavors
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: fitflavors
# "service" is the name of this project. This will also be added to your AWS resource names.
service: fitflavors-api

plugins:
  - serverless-offline

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  runtime: nodejs22.x
  architecture: arm64
  logRetentionInDays: 14
  environment:
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN}
    ENCRYPT_SALTS: ${env:ENCRYPT_SALTS}
    AWS_S3_BUCKET_NAME: !Ref UploadsBucket
    AWS_SQS_MEALS_QUEUE_URL: !Ref MealsQueue

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: !Sub ${UploadsBucket.Arn}/*
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: !GetAtt MealsQueue.Arn

  httpApi:
    authorizers:
      authorizer:
        type: request
        functionName: authorizer
        resultTtlInSeconds: 300
        identitySource: $request.header.Authorization
        managedExternally: false
  # Uncomment to easily set up a custom domain. Read the docs for more details:
  # https://www.serverless.com/framework/docs/providers/aws/guide/domains
  # domain: api.example.com

package:
  individually: true

build:
  esbuild:
    minify: true
    sourcemap: false

functions:
  authorizer:
    handler: src/infra/functions/authorizer.handler

  signin:
    handler: src/infra/functions/signin.handler
    events:
      - httpApi:
          path: /signin
          method: post

  signup:
    handler: src/infra/functions/signup.handler
    events:
      - httpApi:
          path: /signup
          method: post

  profile:
    handler: src/infra/functions/profile.handler
    events:
      - httpApi:
          path: /me
          method: get
          authorizer:
            name: authorizer

  meal:
    handler: src/infra/functions/meal.handler
    events:
      - httpApi:
          path: /meals
          method: post
          authorizer:
            name: authorizer

  listMeals:
    handler: src/infra/functions/list-meals.handler
    events:
      - httpApi:
          path: /meals
          method: get
          authorizer:
            name: authorizer

  fetchMealById:
    handler: src/infra/functions/fetch-meal.handler
    events:
      - httpApi:
          path: /meals/{id}
          method: get
          authorizer:
            name: authorizer

  fileUploadEvent:
    handler: src/infra/functions/file-upload-event.handler
    events:
      - s3:
          bucket: !Ref UploadsBucket
          event: s3:ObjectCreated:*
          existing: true
          forceDeploy: true

  processMeals:
    handler: src/infra/functions/process-meals.handler
    events:
      - sqs:
          arn: !GetAtt MealsQueue.Arn
          batchSize: 1

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-uploads
    MealsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-meals-queue
        VisibilityTimeout: 60
        RedrivePolicy:
          maxReceiveCount: 1
          deadLetterTargetArn: !GetAtt MealsDeadLetterQueue.Arn
    MealsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-meals-dead-letter-queue
